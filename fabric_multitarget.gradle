// Copyright 2023 Atakku <https://atakku.dev>

buildscript {
  repositories {
    mavenCentral()
    maven {
      name = 'Fabric'
      url = 'https://maven.fabricmc.net/'
    }
  }
  dependencies {
    classpath 'fabric-loom:fabric-loom.gradle.plugin:1.3-SNAPSHOT'
  }
}

apply plugin: net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap
apply plugin: 'maven-publish'

base {
  archivesName = project.mod_name
}
group = project.mod_group
version = "$project.mod_version+$project.minecraft_version"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
  it.options.release = 17
}

configurations.all {
  resolutionStrategy {
    force("net.fabricmc:fabric-loader:$loader_version")
    force("net.fabricmc.fabric-api:fabric-api:$fabric_version")
  }
}

sourceSets {
  // Shared Minecraft & Fabric Sourceset
  main {
    java.srcDirs = []
    resources.srcDirs = []
  }
}
jar.enabled = false
remapJar.enabled = false

// Configure a sourceset for each target
targets.each { target, deps ->
  def cap_target = target.capitalize();
  sourceSets {
    "$target" {
      java { 
        srcDirs = ["java/$target/"]
      }
      resources.srcDirs = ["res/$target/"]
      compileClasspath += sourceSets.main.compileClasspath
      runtimeClasspath += sourceSets.main.runtimeClasspath
      deps.each { dep, include ->
        if (include) {
          compileClasspath += sourceSets."$dep".compileClasspath
          runtimeClasspath += sourceSets."$dep".runtimeClasspath
        }
      }
    }
  }

  loom.createRemapConfigurations sourceSets."$target"

  tasks.register("jar$cap_target", Jar) {
    destinationDirectory = jar.destinationDirectory
    archiveClassifier = "dev$cap_target"
    deps.each { dep, include ->
      if (include) {
        from sourceSets."$dep".output
      }
    }
    from sourceSets."$target".output
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
  }
  
  tasks.register("remapJar$cap_target", net.fabricmc.loom.task.RemapJarTask) {
    archiveClassifier = "$target"
    dependsOn "jar$cap_target"
    inputFile = tasks."jar$cap_target".archiveFile
    classpath.from sourceSets."$target".compileClasspath
    addNestedDependencies = false
  }

  assemble.dependsOn "remapJar$cap_target"

  dependencies {
    if (project.hasProperty('lombok_version')) {
      "${target}CompileOnly" "org.projectlombok:lombok:$project.lombok_version"
      "${target}AnnotationProcessor" "org.projectlombok:lombok:$project.lombok_version"
    }
    "${target}Implementation" sourceSets.main.output
    deps.each { dep, include ->
      "${target}Implementation" sourceSets."$dep".output
    }

    if (project.hasProperty('owo_version')) {
      "mod${cap_target}Implementation"("io.wispforest:owo-lib:$project.owo_version")
      "${target}AnnotationProcessor" "io.wispforest:owo-lib:$project.owo_version"
    }
  }

  publishing {
    publications {
      "$target"(MavenPublication) {
        version = mod_version
        artifactId = "$project.mod_id-$project.minecraft_version-$target"
        artifact tasks."remapJar$cap_target".archiveFile
        from components.java
      }
    }
  }
}

loom {
  runs {
    client {
      if (targets.containsKey('client')) {
        source = sourceSets.client
      }
      name = "$project.mod_name Client"
      programArgs '--username', 'AtakkuDev'
      programArgs '--server', 'localhost'
      runDir = '.run/client'
    }
    server {
      if (targets.containsKey('server')) {
        source = sourceSets.server
      }
      name = "$project.mod_name Server"
      runDir = '.run/server'
    }
  }
}


repositories {
  exclusiveContent {
    forRepository {
      maven {
        name = 'modrinth'
        url = 'https://api.modrinth.com/maven'
      }
    }
    filter {
      includeGroup 'maven.modrinth'
    }
  }
  maven {
    name = "github"
    url = "https://maven.pkg.github.com/Eufonia-Studio/"
    credentials(PasswordCredentials)
    authentication {
      basic(BasicAuthentication)
    }
  }
  maven { 
    name = 'wisp'
    url = 'https://maven.wispforest.io' 
  }
  maven { 
    name = 'terraformersmc'
    url = "https://maven.terraformersmc.com/releases/"
  }
}

dependencies {
  minecraft "com.mojang:minecraft:$project.minecraft_version"
  mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"
  modImplementation "net.fabricmc:fabric-loader:$project.loader_version"
  modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_version"

  project.properties.each {
    if (it.key.startsWith("run_")) {
      modLocalRuntime "maven.modrinth:${it.key.split("_")[1]}:${it.value}"
    }
  }
}

tasks.withType(ProcessResources).configureEach {
  it.inputs.properties(project.properties.findAll { it.value instanceof String })
  it.filesMatching('fabric.mod.json') {
    expand(project.properties)
  }
}

publishing {
  repositories {
    maven {
      name = "github"
      url = "https://maven.pkg.github.com/Eufonia-Studio/"
      credentials(PasswordCredentials)
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
}
