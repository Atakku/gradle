// Copyright 2023 Atakku <https://atakku.dev>

buildscript {
  repositories {
    mavenCentral()
    maven {
      name = 'Fabric'
      url = 'https://maven.fabricmc.net/'
    }
  }
  dependencies {
    classpath 'fabric-loom:fabric-loom.gradle.plugin:1.3-SNAPSHOT'
  }
}

task build

subprojects {
  apply plugin: net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap
  apply plugin: 'maven-publish'

  base {
	  archivesName = "$rootProject.mod_name-$project.name"
  }

  group = "dev.atakku"
  version = "$rootProject.mod_version+$rootProject.minecraft_version"

  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  sourceSets {
    main.java.srcDirs = ['java/']
    main.resources.srcDirs = ['res/']
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
  }

  repositories {
    exclusiveContent {
      forRepository {
        maven {
          name = 'modrinth'
          url = 'https://api.modrinth.com/maven'
        }
      }
      filter {
        includeGroup 'maven.modrinth'
      }
    }
    maven {
      name = 'atakku'
      url = 'https://maven.atakku.dev/eufonia'
      credentials(PasswordCredentials)
      authentication {
        basic(BasicAuthentication)
      }
    }
    maven { 
      name = 'wisp'
      url = 'https://maven.wispforest.io' 
    }
    maven { 
      name = 'terraformersmc'
      url = "https://maven.terraformersmc.com/releases/"
    }
  }
  
  if (project.name != 'shared' && rootProject.hasProperty('owo_version')) {
    sourceSets.main.java.srcDirs += [ 'genJava/' ]
    compileJava.options.generatedSourceOutputDirectory = file("$projectDir/genJava/dev/atakku/$mod_id/$project.name")
  }

  dependencies {
    minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
    mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$rootProject.loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_version"

    if (rootProject.hasProperty('lombok_version')) {
      compileOnly "org.projectlombok:lombok:$rootProject.lombok_version"
      annotationProcessor "org.projectlombok:lombok:$rootProject.lombok_version"
    }

    if (project.name != 'shared') {
      if (findProject(':shared')) {
        include(implementation project(path: ':shared', configuration: 'namedElements'))
      }

      if (rootProject.hasProperty('owo_version')) {
        modImplementation "io.wispforest:owo-lib:$rootProject.owo_version"
        annotationProcessor "io.wispforest:owo-lib:$rootProject.owo_version"

        if (rootProject.hasProperty('runtime_modmenu')) {
          modApi "com.terraformersmc:modmenu:$rootProject.runtime_modmenu"
        }
      }
    }

    if (project.name == 'client') {
      rootProject.properties.each {
        if (it.key.startsWith('runtime_')) {
          modLocalRuntime "maven.modrinth:${it.key.split("_")[1]}:${it.value}"
        }
      }

      if (rootProject.hasProperty('hudl_version')) {
        modApi "dev.atakku:hudl-client:$rootProject.hudl_version"
      }
    }
  }

  processResources {
	  inputs.properties(rootProject.properties.findAll { it.value instanceof String })
    filesMatching('fabric.mod.json') {
      expand (rootProject.properties)
    }
  }

  loom {
    runs {
      client {
        programArgs '--username', 'AtakkuDev'
        
        if (findProject(':server')) {
          programArgs '--server', 'localhost'
        }
        runDir = '../.run/client'
        client()
      }
      server {
        runDir = '../.run/server'
        server()
      }
    }
  }

  if (project.name != 'shared') {
    task copyJar(type: Copy) {
      from remapJar
      into '../build'
    }
    build.finalizedBy(copyJar)
    rootProject.build.dependsOn(build)
  }

  publishing {
    repositories {
      maven {
        name = "atakku"
        url = "https://maven.atakku.dev/eufonia"
        credentials(PasswordCredentials)
        authentication {
          basic(BasicAuthentication)
        }
      }
    }
    publications {
      maven(MavenPublication) {
        from components.java
        artifactId = "$rootProject.mod_id-$project.name"
      }
    }
  }
}
