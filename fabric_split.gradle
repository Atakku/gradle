// Copyright 2023 Atakku <https://atakku.dev>

buildscript {
  repositories {
    maven {
      name = 'Fabric'
      url = 'https://maven.fabricmc.net/'
    }
    mavenCentral()
    gradlePluginPortal()
  }
  dependencies {
    classpath 'fabric-loom:fabric-loom.gradle.plugin:1.3-SNAPSHOT'
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'net.fabricmc.loom.LoomGradlePlugin'

  group = "dev.atakku"
  archivesBaseName = "$rootProject.mod_name-$project.name"
  version = "$rootProject.mod_version+$rootProject.minecraft_version"

  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  sourceSets {
    main.java.srcDirs = ['java/']
    main.resources.srcDirs = ['res/']
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
  }

  repositories {
    exclusiveContent {
      forRepository {
        maven {
          name = 'Modrinth'
          url = 'https://api.modrinth.com/maven'
        }
      }
      filter {
        includeGroup 'maven.modrinth'
      }
    }
    maven {
      name = 'atakku'
      url = 'https://maven.atakku.dev/eufonia'
    }
  }

  dependencies {
    minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
    mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$rootProject.loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_version"

    compileOnly "org.projectlombok:lombok:$rootProject.lombok_version"
    annotationProcessor "org.projectlombok:lombok:$rootProject.lombok_version"

    if (project.name != 'shared') {
      include(implementation project(path: ':shared', configuration: 'namedElements'))
    }

    modLocalRuntime "maven.modrinth:modmenu:$rootProject.modmenu_version"
  }

  processResources {
    filesMatching('fabric.mod.json') {
      expand (rootProject.properties)
    }
  }

  loom {
    runs {
      client {
        programArgs '--username', 'AtakkuDev'
        runDir = '../.run/client'
        client()
      }
      server {
        runDir = '../.run/server'
        server()
      }
    }
  }

  if (project.name != 'shared') {
    task copyJar(type: Copy) {
      from remapJar
      into '../build'
    }
    build.finalizedBy("$project.path:copyJar")
  }
}

task build
build.dependsOn(':client:build')
build.dependsOn(':server:build')
