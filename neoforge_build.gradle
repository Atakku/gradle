// Copyright 2025 Atakku <https://atakku.dev>

buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath 'org.gradle.toolchains.foojay-resolver-convention:org.gradle.toolchains.foojay-resolver-convention.gradle.plugin:1.0.0'
    classpath 'net.neoforged.moddev:net.neoforged.moddev.gradle.plugin:2.0.107'
  }
}

tasks.named('wrapper', Wrapper).configure {
  distributionType = Wrapper.DistributionType.BIN
}

subprojects {
  apply plugin: net.neoforged.moddevgradle.internal.ModDevPlugin

  base {
    archivesName = rootProject.mod_name
  }

  group = rootProject.mod_group
  version = "$rootProject.mod_version+$rootProject.minecraft_version-$project.name"

  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21

  tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
    options.encoding = 'UTF-8'
  }
  
  sourceSets {
    main.java.srcDirs = [file("$rootDir/java/$project.name")]
    main.resources.srcDirs = [file("$rootDir/res/$project.name")]
  }

  neoForge {
    version = rootProject.neo_version

    parchment {
      mappingsVersion = rootProject.mappings_version
      minecraftVersion = rootProject.minecraft_version
    }

    runs {
      client {
        client()
      }

      server {
        server()
        programArgument '--nogui'
      }

      configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        logLevel = org.slf4j.event.Level.DEBUG
      }
    }

    mods {
      "${rootProject.mod_id}" {
        sourceSet(sourceSets.main)
      }
    }
  }
}

subprojects {
  var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
      mod_id                 : mod_id,
      mod_version            : mod_version,
      mod_name               : mod_name,
      neo_version            : neo_version,
      minecraft_version      : minecraft_version
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from file("$rootDir/templates")
    into "build/generated/sources/modMetadata"
  }
  sourceSets.main.resources.srcDir generateModMetadata
  neoForge.ideSyncTask generateModMetadata

  tasks.named('jar', Jar) {
    destinationDirectory = file("$rootDir/build/libs")
  }
}

gradle.ext.targets.each { target, deps ->
  project(":$target") {
    dependencies {
      deps.each { dep, inc ->
        if (inc) {
          include(implementation project(path: ":$dep", configuration: 'namedElements'))
        } else {
          implementation project(path: ":$dep", configuration: 'namedElements')
        }
      }
    }
  }
}
